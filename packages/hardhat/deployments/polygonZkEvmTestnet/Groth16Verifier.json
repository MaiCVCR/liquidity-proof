{
  "address": "0xE317bF090911AF03fEa09c1707Ec370EdFf8C0A8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[1]",
          "name": "_pubSignals",
          "type": "uint256[1]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2040333cdc6357dde6b4e9f75ba6033e665e1038ca8cb2779f9121e31b836d8",
  "receipt": {
    "to": null,
    "from": "0x1F658AF12F5a0D72e4652f53399e556B9dB23904",
    "contractAddress": "0xE317bF090911AF03fEa09c1707Ec370EdFf8C0A8",
    "transactionIndex": 0,
    "gasUsed": "352810",
    "logsBloom": "0x
    "blockHash": "0xf9e00d1594919004b2e87e648432bf77ee5011d33d5a31437ccfa3255b271cfd",
    "transactionHash": "0xc2040333cdc6357dde6b4e9f75ba6033e665e1038ca8cb2779f9121e31b836d8",
    "logs": [],
    "blockNumber": 7856661,
    "cumulativeGasUsed": "352810",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1796c91df2e5d2e453908d7455d63ee2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifier.sol\":\"Groth16Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n/*\\r\\n    Copyright 2021 0KIMS association.\\r\\n\\r\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\r\\n\\r\\n    snarkJS is a free software: you can redistribute it and/or modify it\\r\\n    under the terms of the GNU General Public License as published by\\r\\n    the Free Software Foundation, either version 3 of the License, or\\r\\n    (at your option) any later version.\\r\\n\\r\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\r\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\r\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\r\\n    License for more details.\\r\\n\\r\\n    You should have received a copy of the GNU General Public License\\r\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\r\\n*/\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ncontract Groth16Verifier {\\r\\n    // Scalar field size\\r\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\r\\n    // Base field size\\r\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\r\\n\\r\\n    // Verification Key data\\r\\n    uint256 constant alphax  = 17843259101072915962003956105253474544904771326232684333807630285522149837192;\\r\\n    uint256 constant alphay  = 15359547257205016033971284879743682735757662163997639996940711215494019614709;\\r\\n    uint256 constant betax1  = 9346933868160630735539040141932659483810413044580919376691864200471149340421;\\r\\n    uint256 constant betax2  = 17307091395423255725857326530225521824729295383213000078642316613496175803764;\\r\\n    uint256 constant betay1  = 2425181061430521333122752775427073054031133749103145164564250016845890576366;\\r\\n    uint256 constant betay2  = 11792401529146802007566937061222877019563325184870515245702993523218343823564;\\r\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\r\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\r\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\r\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\r\\n    uint256 constant deltax1 = 21494798975874983586642561584158169290768784214374689967476556552458265805328;\\r\\n    uint256 constant deltax2 = 16045777936586803387018169915812963010749354492653214044220829586780873043391;\\r\\n    uint256 constant deltay1 = 20102909077264440398240500642138624976790912774577277461211354062985743363966;\\r\\n    uint256 constant deltay2 = 8339489321148937473734915351252905392571624713095750939678906270593342256204;\\r\\n\\r\\n    \\r\\n    uint256 constant IC0x = 9572429514829845349416479030161665787374680072250158722550372187781682520379;\\r\\n    uint256 constant IC0y = 2547316024526711563454255285166222203734352947604484862786842395488450962599;\\r\\n    \\r\\n    uint256 constant IC1x = 1659772969019130968055014289022240943700089531106915854439862738032519424182;\\r\\n    uint256 constant IC1y = 14774677465073298933673098704908626099379030653564852319661451653689456550597;\\r\\n    \\r\\n \\r\\n    // Memory data\\r\\n    uint16 constant pVk = 0;\\r\\n    uint16 constant pPairing = 128;\\r\\n\\r\\n    uint16 constant pLastMem = 896;\\r\\n\\r\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[1] calldata _pubSignals) public view returns (bool) {\\r\\n        assembly {\\r\\n            function checkField(v) {\\r\\n                if iszero(lt(v, r)) {\\r\\n                    mstore(0, 0)\\r\\n                    return(0, 0x20)\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\r\\n            function g1_mulAccC(pR, x, y, s) {\\r\\n                let success\\r\\n                let mIn := mload(0x40)\\r\\n                mstore(mIn, x)\\r\\n                mstore(add(mIn, 32), y)\\r\\n                mstore(add(mIn, 64), s)\\r\\n\\r\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\r\\n\\r\\n                if iszero(success) {\\r\\n                    mstore(0, 0)\\r\\n                    return(0, 0x20)\\r\\n                }\\r\\n\\r\\n                mstore(add(mIn, 64), mload(pR))\\r\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\r\\n\\r\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\r\\n\\r\\n                if iszero(success) {\\r\\n                    mstore(0, 0)\\r\\n                    return(0, 0x20)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\r\\n                let _pPairing := add(pMem, pPairing)\\r\\n                let _pVk := add(pMem, pVk)\\r\\n\\r\\n                mstore(_pVk, IC0x)\\r\\n                mstore(add(_pVk, 32), IC0y)\\r\\n\\r\\n                // Compute the linear combination vk_x\\r\\n                \\r\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\r\\n                \\r\\n\\r\\n                // -A\\r\\n                mstore(_pPairing, calldataload(pA))\\r\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\r\\n\\r\\n                // B\\r\\n                mstore(add(_pPairing, 64), calldataload(pB))\\r\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\r\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\r\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\r\\n\\r\\n                // alpha1\\r\\n                mstore(add(_pPairing, 192), alphax)\\r\\n                mstore(add(_pPairing, 224), alphay)\\r\\n\\r\\n                // beta2\\r\\n                mstore(add(_pPairing, 256), betax1)\\r\\n                mstore(add(_pPairing, 288), betax2)\\r\\n                mstore(add(_pPairing, 320), betay1)\\r\\n                mstore(add(_pPairing, 352), betay2)\\r\\n\\r\\n                // vk_x\\r\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\r\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\r\\n\\r\\n\\r\\n                // gamma2\\r\\n                mstore(add(_pPairing, 448), gammax1)\\r\\n                mstore(add(_pPairing, 480), gammax2)\\r\\n                mstore(add(_pPairing, 512), gammay1)\\r\\n                mstore(add(_pPairing, 544), gammay2)\\r\\n\\r\\n                // C\\r\\n                mstore(add(_pPairing, 576), calldataload(pC))\\r\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\r\\n\\r\\n                // delta2\\r\\n                mstore(add(_pPairing, 640), deltax1)\\r\\n                mstore(add(_pPairing, 672), deltax2)\\r\\n                mstore(add(_pPairing, 704), deltay1)\\r\\n                mstore(add(_pPairing, 736), deltay2)\\r\\n\\r\\n\\r\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\r\\n\\r\\n                isOk := and(success, mload(_pPairing))\\r\\n            }\\r\\n\\r\\n            let pMem := mload(0x40)\\r\\n            mstore(0x40, add(pMem, pLastMem))\\r\\n\\r\\n            // Validate that all evaluations \\u2208 F\\r\\n            \\r\\n            checkField(calldataload(add(_pubSignals, 0)))\\r\\n            \\r\\n            checkField(calldataload(add(_pubSignals, 32)))\\r\\n            \\r\\n\\r\\n            // Validate all evaluations\\r\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\r\\n\\r\\n            mstore(0, isValid)\\r\\n             return(0, 0x20)\\r\\n         }\\r\\n     }\\r\\n }\\r\\n\",\"keccak256\":\"0x96eb393129121125891eb5e60247e6b0b691a9a15057b284f14bfdbe837a0ac4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061056b806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004361003e3660046104cf565b610057565b604051901515815260200160405180910390f35b600061047a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061008f576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100c5576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806100f6576000805260206000f35b5050505050565b7f1529cd985593d06558ef6fd7a846973a06d6b43d2663ce5fedfc884e3305613b85527f05a1bad2a8c0bf484b011a09846d956ef51fbec96801ab96249645b9dd4ae4a760208601526000608086018661019a87357f20aa2bcd475aaa6a97f4c11a0337aed6a425d56c100a249904e7eeff0c2162c57f03ab65f10de6ebf1db060eecf0570d35bd12cc15a50c576da87ad2ff63c628b684610092565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2772ed400f6209c5c7cccc22a0b1f171aa86eab8c8204144c004e616fd2c098860c08201527f21f5321794fd44fc11c72c7f0712b262ed7cb36f03ff970f9b270665307b07f560e08201527f14aa2d55f041865ac08ca690ca9794eac879c63674124e54f8c881db5680e7056101008201527f264377728b4c4aa638cb1ed4d57fb1c2eeb29b8a0840f130d2448858802f3d746101208201527f055c9a95188c136dcf7a32b1769dda35cbf40fc43fd44cc9f686872756fbdfee6101408201527f1a124342d53703d865104207b3ce4e38538afa322dba3065b491b7e4cfd488cc610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f2f85a005b0e8c484c6ee319f93e2f1597f441de5b50cb947ee8267f5031dc2106102808201527f237996a626472254f5eebcff3c5c7f83e38094f3a59e73f39fc2a405a3bc2dbf6102a08201527f2c71d7e3f6039bf0db4f47068bd121b7b3a7d16fa0c68ee3c6fd757157e4ef7e6102c08201527f126ffbd2d60297ea8cb317c3eb8370f2aa40300d795637ce05b83e268044344c6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610492600084013561005e565b61049f602084013561005e565b6104ac818486888a6100fd565b90508060005260206000f35b80604081018310156104c957600080fd5b92915050565b6000806000806101208086880312156104e757600080fd5b6104f187876104b8565b945060c086018781111561050457600080fd5b60408701945061051488826104b8565b93505086818701111561052657600080fd5b5092959194509261010001915056fea264697066735822122075408c50bb5e590af7e304a4438d8979254003796541235e0eebb47a8ec215aa64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004361003e3660046104cf565b610057565b604051901515815260200160405180910390f35b600061047a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001811061008f576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100c5576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806100f6576000805260206000f35b5050505050565b7f1529cd985593d06558ef6fd7a846973a06d6b43d2663ce5fedfc884e3305613b85527f05a1bad2a8c0bf484b011a09846d956ef51fbec96801ab96249645b9dd4ae4a760208601526000608086018661019a87357f20aa2bcd475aaa6a97f4c11a0337aed6a425d56c100a249904e7eeff0c2162c57f03ab65f10de6ebf1db060eecf0570d35bd12cc15a50c576da87ad2ff63c628b684610092565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2772ed400f6209c5c7cccc22a0b1f171aa86eab8c8204144c004e616fd2c098860c08201527f21f5321794fd44fc11c72c7f0712b262ed7cb36f03ff970f9b270665307b07f560e08201527f14aa2d55f041865ac08ca690ca9794eac879c63674124e54f8c881db5680e7056101008201527f264377728b4c4aa638cb1ed4d57fb1c2eeb29b8a0840f130d2448858802f3d746101208201527f055c9a95188c136dcf7a32b1769dda35cbf40fc43fd44cc9f686872756fbdfee6101408201527f1a124342d53703d865104207b3ce4e38538afa322dba3065b491b7e4cfd488cc610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f2f85a005b0e8c484c6ee319f93e2f1597f441de5b50cb947ee8267f5031dc2106102808201527f237996a626472254f5eebcff3c5c7f83e38094f3a59e73f39fc2a405a3bc2dbf6102a08201527f2c71d7e3f6039bf0db4f47068bd121b7b3a7d16fa0c68ee3c6fd757157e4ef7e6102c08201527f126ffbd2d60297ea8cb317c3eb8370f2aa40300d795637ce05b83e268044344c6102e08201526020816103008360086107d05a03fa9051169695505050505050565b6040516103808101604052610492600084013561005e565b61049f602084013561005e565b6104ac818486888a6100fd565b90508060005260206000f35b80604081018310156104c957600080fd5b92915050565b6000806000806101208086880312156104e757600080fd5b6104f187876104b8565b945060c086018781111561050457600080fd5b60408701945061051488826104b8565b93505086818701111561052657600080fd5b5092959194509261010001915056fea264697066735822122075408c50bb5e590af7e304a4438d8979254003796541235e0eebb47a8ec215aa64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}